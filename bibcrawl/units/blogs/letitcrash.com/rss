<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><description>Various posts by the hAkkers in the Akka Team and the Akka community.

Links:
Akka Home
Akka Docs</description><title>Let it crash</title><generator>Tumblr (3.0; @hakkers)</generator><link>http://letitcrash.com/</link><item><title>Akka 2.2.1 Released</title><description>&lt;p&gt;&lt;em&gt;Dear hAkkers,&lt;/em&gt;&lt;br/&gt;&lt;br/&gt;We—the Akka committers—are pleased to be able to announce the availability of Akka 2.2.1. This is the first maintenance release of the 2.2 branch, containing documentation improvements and fixing several issues including:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Convenience method for looking up ActorRef via ActorSelection&lt;/li&gt;
&lt;li&gt;Configurable dispatcher for internal remoting actors&lt;/li&gt;
&lt;li&gt;Java support of ask pattern using ActorSelection as target&lt;/li&gt;
&lt;li&gt;Less noisy and more configurable logging of remoting events&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; &amp;#8230; and several smaller fixes.&lt;/p&gt;
&lt;p&gt;This release is backwards binary compatible with version 2.2.0, which means that the new JARs are a drop-in replacement for the old ones (but not the other way around) as long as your build does not enable the inliner (Scala-only restriction). Always make sure to use at least the latest version required by any of your project’s dependencies.&lt;/p&gt;
&lt;h3&gt;Migrating from Older Releases&lt;/h3&gt;
&lt;p&gt;When migrating an existing project from Akka 2.1.x please have a look at our migration guide:&lt;br/&gt;&lt;a href="http://doc.akka.io/docs/akka/2.2.1/project/migration-guide-2.1.x-2.2.x.html"&gt;http://doc.akka.io/docs/akka/2.2.1/project/migration-guide-2.1.x-2.2.x.html&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;IMPORTANT NOTICE&lt;/h3&gt;
&lt;p&gt;The artifacts comprising this release have been published to &lt;a href="https://oss.sonatype.org/content/repositories/releases/"&gt;https://oss.sonatype.org/content/repositories/releases/&lt;/a&gt; and also to Maven Central. In addition, we adopted the SBT standard of encoding the Scala binary version in the artifact name, i.e. the core actor package’s artifactId is “akka-actor_2.10”.&lt;/p&gt;
&lt;h3&gt;2.2.1 compared to 2.2.0:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;28 tickets closed&lt;/li&gt;
&lt;li&gt;128 files changed, 2708 insertions(+), 692 deletions(-)&lt;/li&gt;
&lt;li&gt;and a total of 7 committers!&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Fixed Tickets:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;3015  use sbt-s3 to host akka.zip&lt;/li&gt;
&lt;li&gt;3389  IO: fix SSL engine shutdown&lt;/li&gt;
&lt;li&gt;3485  Add config to be able to define a separate dispatcher for the internal remoting actors&lt;/li&gt;
&lt;li&gt;3491  backport a55d024: Reducing the use of intermediate datastructures for the ClusterMessageSerializer&lt;/li&gt;
&lt;li&gt;3492  backport 16fe004: Fixing missing notFull-signal in BoundedBlockingQueue drainTo and clear&lt;/li&gt;
&lt;li&gt;3496  backport 2826ace: sbt 0.12.4&lt;/li&gt;
&lt;li&gt;3500  DOC: add section about Dependency Injection&lt;/li&gt;
&lt;li&gt;3504  Disassociation events should not be logged as errors&lt;/li&gt;
&lt;li&gt;3517  AdaptiveLoadBalancingRouter with Random - n must be positive&lt;/li&gt;
&lt;li&gt;3519  ClusterRouterConfig does not use the passed SupervisorStrategy&lt;/li&gt;
&lt;li&gt;3521  serialize-messages option fails&lt;/li&gt;
&lt;li&gt;3525  IO: `finishConnect` may return false after OP_CONNECT on Android&lt;/li&gt;
&lt;li&gt;3527  Remote DeathWatch must perform identity check on heartbeats&lt;/li&gt;
&lt;li&gt;3529  Add convenience helper for looking up an actor by identity&lt;/li&gt;
&lt;li&gt;3531  DOC: recommend orElseâ?ting super.supervisorStrategy.decider&lt;/li&gt;
&lt;li&gt;3532  add Patterns.ask for ActorSelection&lt;/li&gt;
&lt;li&gt;3535  Akka IO - CommandFailed(_: Connect) not sent for `Connection refused`&lt;/li&gt;
&lt;li&gt;3536  Akka cluster management command line script (bin/akka-cluster) requires a space rather than a colon between node-h&lt;br/&gt;ostname and jmx-port&lt;/li&gt;
&lt;li&gt;3539  The docs and spec are omitting the shortcomings of how we handle management of nodes that are UNREACHABLE &amp;amp; DOWN&lt;/li&gt;
&lt;li&gt;3541  Errors encountered during akka.camel.Consumer route creation are too difficult to debug&lt;/li&gt;
&lt;li&gt;3546  Change log level of Ignoring received gossip status from unknown&lt;/li&gt;
&lt;li&gt;3547  Perf: Don&amp;#8217;t call unsubscribeAddressTerminated if not needed&lt;/li&gt;
&lt;li&gt;3550  backport ByteStringBuilder.putLongPart fix to 2.2&lt;/li&gt;
&lt;li&gt;3555  Superfluous pattern match in EndpointWriter&lt;/li&gt;
&lt;li&gt;3558  Create sbt build top level pr-validation target for all branches&lt;/li&gt;
&lt;li&gt;3559  Enable mima and verify binary compatibility between 2.2.1 and 2.2.0&lt;/li&gt;
&lt;li&gt;3563  Supress logging of NotSerializableException in LoggingReceiveSpec&lt;/li&gt;
&lt;li&gt;3565  Mailbox requirements not picked up by Props.apply(new StashingActor)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Credits:&lt;/p&gt;
&lt;pre&gt; commits added removed&lt;br/&gt;      15     500     122 Patrik Nordwall&lt;br/&gt;      12     732     239 Endre Sándor Varga&lt;br/&gt;       4    1185     157 Björn Antonsson&lt;br/&gt;       4     159     175 Viktor Klang&lt;br/&gt;       3      11      11 Roland Kuhn&lt;br/&gt;       1       2       1 Andrey Stepachev&lt;br/&gt;       1       1       1 Francois Armand&lt;br/&gt;       1       1       1 Joa Ebert&lt;br/&gt;       1     114       6 Ian Wormsbecker&lt;br/&gt;       1      24       5 Johannes Rudolph&lt;br/&gt;       1      16      11 Taylor Leese&lt;br/&gt;       1       1       1 oakwhiz&lt;/pre&gt;
&lt;p&gt;Special thanks to Andrey Stepachev for profiling and fixing the DeathWatch performance regression.&lt;/p&gt;
&lt;h3&gt;Website:&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://akka.io"&gt;http://akka.io&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Binary distribution:&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://downloads.typesafe.com/akka/akka-2.2.1.tgz"&gt;http://downloads.typesafe.com/akka/akka-2.2.1.tgz&lt;/a&gt;&lt;br/&gt;&lt;a href="http://downloads.typesafe.com/akka/akka-2.2.1.zip"&gt;http://downloads.typesafe.com/akka/akka-2.2.1.zip&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Documentation:&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://doc.akka.io/docs/akka/2.2.1/"&gt;http://doc.akka.io/docs/akka/2.2.1/&lt;/a&gt;&lt;br/&gt;&lt;a href="http://doc.akka.io/japi/akka/2.2.1/"&gt;http://doc.akka.io/japi/akka/2.2.1/&lt;/a&gt;&lt;br/&gt;&lt;a href="http://doc.akka.io/api/akka/2.2.1"&gt;http://doc.akka.io/api/akka/2.2.1&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Issue tracker:&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.assembla.com/spaces/akka/"&gt;http://www.assembla.com/spaces/akka/&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Mailing list:&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://groups.google.com/group/akka-user"&gt;https://groups.google.com/group/akka-user&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;em&gt;Akka is released under the Apache V2 license.&lt;/em&gt;&lt;/p&gt;</description><link>http://letitcrash.com/post/59673923533</link><guid>http://letitcrash.com/post/59673923533</guid><pubDate>Thu, 29 Aug 2013 14:04:39 +0200</pubDate><category>announcement</category><category>Author: Endre Sándor Varga</category><dc:creator>drewhk</dc:creator></item><item><title>New Coursera Course on Principles of Reactive Programming</title><description>&lt;p&gt;We are proud to announce that Akka Tech Lead Dr. Roland Kuhn will co-present the Coursera course on the &lt;a href="https://www.coursera.org/course/reactive"&gt;Principles of Reactive Programming&lt;/a&gt; together with Prof. Martin Odersky and Prof. Erik Meijer of LINQ and Rx fame. This follow-on course on Martin Odersky’s &lt;a href="https://www.coursera.org/course/progfun"&gt;Functional Programming Principles in Scala&lt;/a&gt; will guide you through the core concepts outlined in the &lt;a href="http://www.reactivemanifesto.org/"&gt;Reactive Manifesto&lt;/a&gt;, illustrating the techniques using Scala’s &lt;a href="http://docs.scala-lang.org/overviews/core/futures.html"&gt;Futures&lt;/a&gt;, Netflix’ &lt;a href="https://github.com/Netflix/RxJava/tree/master/language-adaptors/rxjava-scala"&gt;RxJava&lt;/a&gt; and &lt;a href="http://doc.akka.io/docs/akka/2.2.0/general/actors.html"&gt;Akka actors&lt;/a&gt;. Typesafe is offering &lt;a href="http://typesafe.com/blog/announcing_typesafe_new_coursera_tutoring_program"&gt;online tutoring&lt;/a&gt; accompanying the course.&lt;/p&gt;
&lt;p&gt;Looking forward to seeing you all in class!&lt;/p&gt;</description><link>http://letitcrash.com/post/59504788607</link><guid>http://letitcrash.com/post/59504788607</guid><pubDate>Tue, 27 Aug 2013 20:05:00 +0200</pubDate><category>course</category><category>reactive programming</category><dc:creator>pionic</dc:creator></item><item><title>EAI Patterns Series by @VaughnVernon</title><description>&lt;p&gt;&lt;a href="https://vaughnvernon.co/"&gt;Vaughn Vernon&lt;/a&gt;—author of &lt;em&gt;Implementing Domain-Driven Design&lt;/em&gt;—has published a very inspiring series of blog posts about actor communication patterns, in particular those described in &lt;a href="http://www.eaipatterns.com/"&gt;Enterprise Integration Patterns&lt;/a&gt; by Hohpe &amp;amp; Woolf. If you have not already done so you should head over there and start reading:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://vaughnvernon.co/?p=261" rel="bookmark" title="EAI Patterns with Actor Model: Request-Reply"&gt;Request-Reply&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vaughnvernon.co/?p=278" rel="bookmark" title="EAI Patterns with Actor Model: Return Address"&gt;Return Address&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vaughnvernon.co/?p=295" rel="bookmark" title="EAI Patterns with Actor Model: Envelope Wrapper"&gt;Envelope Wrapper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vaughnvernon.co/?p=329" rel="bookmark" title="EAI Patterns with Actor Model: Content Enricher"&gt;Content Enricher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vaughnvernon.co/?p=363" rel="bookmark" title="EAI Patterns with Actor Model: Content Filter"&gt;Content Filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vaughnvernon.co/?p=388" rel="bookmark" title="EAI Patterns with Actor Model: Splitter"&gt;Splitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vaughnvernon.co/?p=401" rel="bookmark" title="EAI Patterns with Actor Model: Content-Based Router"&gt;Content-Based Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vaughnvernon.co/?p=430" rel="bookmark" title="EAI Patterns with Actor Model: Dynamic Router"&gt;Dynamic Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vaughnvernon.co/?p=485" rel="bookmark" title="EAI Patterns with Actor Model: Routing Slip"&gt;Routing Slip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vaughnvernon.co/?p=518" rel="bookmark" title="EAI Patterns with Actor Model: Recipient List"&gt;Recipient List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vaughnvernon.co/?p=539" rel="bookmark" title="EAI Patterns with Actor Model: Aggregator"&gt;Aggregator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vaughnvernon.co/?p=561" rel="bookmark" title="EAI Patterns with Actor Model: Scatter-Gather"&gt;Scatter-Gather&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vaughnvernon.co/?p=590" rel="bookmark" title="EAI Patterns with Actor Model: Resequencer"&gt;Resequencer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vaughnvernon.co/?p=609" rel="bookmark" title="EAI Patterns with Actor Model: Claim Check"&gt;Claim Check&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vaughnvernon.co/?p=634" rel="bookmark" title="EAI Patterns with Actor Model: Message Expiration"&gt;Message Expiration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vaughnvernon.co/?p=670" rel="bookmark" title="EAI Patterns with Actor Model: Message Bus"&gt;Message Bus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vaughnvernon.co/?p=717" rel="bookmark" title="EAI Patterns with Actor Model: Message Channel"&gt;Message Channel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This concludes the series as of this writing. Interestingly enough, the last post introduces &lt;a href="https://github.com/eligosource/eventsourced"&gt;eventsourced&lt;/a&gt;, the library which Martin Krasser is currently porting into the upcoming &lt;strong&gt;akka-persistence&lt;/strong&gt; module as &lt;a href="http://typesafe.com/blog/typesafe_and_eligotech_partner_to_deliver_akka_persistence"&gt;announced earlier.&lt;/a&gt;&lt;/p&gt;</description><link>http://letitcrash.com/post/59190266995</link><guid>http://letitcrash.com/post/59190266995</guid><pubDate>Sat, 24 Aug 2013 13:53:41 +0200</pubDate><category>pattern</category><category>Author: Roland Kuhn</category><dc:creator>pionic</dc:creator></item><item><title>2.2 Spotlight: Running Actor Apps with akka.Main</title><description>&lt;p&gt;One high-level pattern we have recommended often in the past is to minimize the number of top-level actors, which in its logical consequence means to have only exactly one of these. This one top-level actor represents the whole application life-cycle: its constructor is equivalent to a traditional main class in Java and its supervisorStrategy determines which components of the application can be restarted and which failures are fatal.&lt;/p&gt;
&lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt;
&lt;script src="https://gist.github.com/rkuhn/6322930.js" type="text/javascript"&gt;&lt;/script&gt;&lt;p&gt;In the actor above the web front-end is restartable while a failure in the database brings down the whole application (just as a contrived example). This works by stopping the database actor which will trigger DeathWatch to send us a Terminated message upon which we stop ourselves. This actor can be run as a main program like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;java -classpath &amp;lt;scala, akka and what you need&amp;gt; akka.Main demo.TopLevel&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For more information see the API docs for &lt;a href="http://doc.akka.io/japi/akka/2.2.0/akka/Main.html"&gt;Java&lt;/a&gt; and &lt;a href="http://doc.akka.io/api/akka/2.2.0/#akka.Main%24"&gt;Scala&lt;/a&gt;.&lt;/p&gt;</description><link>http://letitcrash.com/post/59125637208</link><guid>http://letitcrash.com/post/59125637208</guid><pubDate>Fri, 23 Aug 2013 21:33:00 +0200</pubDate><category>Author: Roland Kuhn</category><category>spotlight22</category><dc:creator>pionic</dc:creator></item><item><title>2.2 Spotlight: Adaptive Load Balancing Based on Cluster Metrics</title><description>&lt;p&gt;The member nodes of the cluster collects system health metrics, such as heap memory and CPU usage. The metrics are spread to other nodes and consumed by a new type of router that performs load balancing of messages to cluster nodes based on the cluster metrics data.&lt;/p&gt;
&lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt;
&lt;p&gt;The router is defined in the same way as other routers:&lt;/p&gt;
&lt;script src="https://gist.github.com/patriknw/4970794.js" type="text/javascript"&gt;&lt;/script&gt;&lt;p&gt;and in this case it&amp;#8217;s configured as follows:&lt;/p&gt;
&lt;script src="https://gist.github.com/patriknw/4970797.js" type="text/javascript"&gt;&lt;/script&gt;&lt;p&gt;Many thanks to &lt;a href="https://twitter.com/helenaedelson"&gt;Helena Edelson&lt;/a&gt; for her great contributions to the metrics design and implementation. In a &lt;a href="http://letitcrash.com/post/43480488964/the-new-cluster-metrics-aware-adaptive-load-balancing"&gt;prior blog post&lt;/a&gt; she has described this topic in more detail.&lt;/p&gt;
&lt;p&gt;Read more in the &lt;a href="http://doc.akka.io/docs/akka/2.2.0/scala/cluster-usage.html#Cluster_Metrics"&gt;docs for Scala&lt;/a&gt; or in the docs for &lt;a href="http://doc.akka.io/docs/akka/2.2.0/java/cluster-usage.html#Cluster_Metrics"&gt;docs for Java&lt;/a&gt;.&lt;/p&gt;</description><link>http://letitcrash.com/post/56958418119</link><guid>http://letitcrash.com/post/56958418119</guid><pubDate>Wed, 31 Jul 2013 11:06:00 +0200</pubDate><category>spotlight22</category><category>Author: Patrik Nordwall</category><dc:creator>patriknw</dc:creator></item><item><title>2.2 Spotlight: Graceful Removal of Cluster Member</title><description>&lt;p&gt;You can just stop the actor system (or the JVM process). It will be detected as unreachable and removed after the automatic or manual downing, but there is a nicer alternative.&lt;/p&gt;
&lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt;
&lt;p&gt;A more graceful exit can be performed if you tell the cluster that a node shall leave. For example cluster aware routers take advantage of such removal by avoiding usage of nodes that are leaving.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Cluster(system).leave(address)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command can be issued to any member in the cluster, not necessarily the one that is leaving.&lt;/p&gt;</description><link>http://letitcrash.com/post/56770676557</link><guid>http://letitcrash.com/post/56770676557</guid><pubDate>Mon, 29 Jul 2013 11:12:00 +0200</pubDate><category>spotlight22</category><category>Author: Patrik Nordwall</category><dc:creator>patriknw</dc:creator></item><item><title>2.2 Spotlight: Startup when Cluster Size Reached</title><description>&lt;p&gt;With a configuration option you can define required number of members of a certain role before the leader changes status of &amp;#8216;Joining&amp;#8217; members to &amp;#8216;Up&amp;#8217;.&lt;!-- more --&gt;&lt;/p&gt;
&lt;script src="https://gist.github.com/patriknw/5932860.js" type="text/javascript"&gt;&lt;/script&gt;&lt;p&gt;You can defer startup of actors until the cluster has at least the defined number of members.&lt;/p&gt;
&lt;script src="https://gist.github.com/patriknw/5925841.js" type="text/javascript"&gt;&lt;/script&gt;&lt;p&gt;Read more in the &lt;a href="http://doc.akka.io/docs/akka/2.2.0/scala/cluster-usage.html#How_To_Startup_when_Cluster_Size_Reached"&gt;docs for Scala&lt;/a&gt; or in the &lt;a href="http://doc.akka.io/docs/akka/2.2.0/java/cluster-usage.html#How_To_Startup_when_Cluster_Size_Reached"&gt;docs for Java&lt;/a&gt;.&lt;/p&gt;</description><link>http://letitcrash.com/post/56322490862</link><guid>http://letitcrash.com/post/56322490862</guid><pubDate>Wed, 24 Jul 2013 11:53:00 +0200</pubDate><category>spotlight22</category><category>Author: Patrik Nordwall</category><dc:creator>patriknw</dc:creator></item><item><title>2.2 Spotlight: Cluster Client</title><description>&lt;p&gt;An actor system that is not part of the cluster can communicate with actors somewhere in the cluster via the &lt;code&gt;ClusterClient&lt;/code&gt;. &lt;!-- more --&gt;It will establish a connection to one node in the cluster and all messages are routed via that node, and the destination actor can be located anywhere in the cluster. The client does not have to know where.&lt;/p&gt;
&lt;script src="https://gist.github.com/patriknw/5932539.js" type="text/javascript"&gt;&lt;/script&gt;&lt;p&gt;The &lt;a href="http://doc.akka.io/docs/akka/2.2.0/contrib/cluster-client.html"&gt;documentation&lt;/a&gt; describes the &lt;code&gt;ClusterClient&lt;/code&gt; in more detail, including how to use it from Java or Scala.&lt;/p&gt;</description><link>http://letitcrash.com/post/56134720289</link><guid>http://letitcrash.com/post/56134720289</guid><pubDate>Mon, 22 Jul 2013 11:58:00 +0200</pubDate><category>spotlight22</category><category>Author: Patrik Nordwall</category><dc:creator>patriknw</dc:creator></item><item><title>Akka Dependency Injection</title><description>&lt;p&gt;During the past months we have received questions—from commercial users of Akka as well as on the mailing list and at conferences—about the interplay of the Actor model and dependency injection. Built on our own trials as well as the feedback we got we condensed what we learned into a &lt;a href="https://docs.google.com/document/d/1gI4gW5OOYIMLOmIcx_VSnng2rYIFE1P0PoDyvXwhvQY/pub"&gt;small document&lt;/a&gt; which is included below for convenience as well.&lt;!-- more --&gt;&lt;/p&gt;
&lt;p&gt;&lt;iframe height="1000" src="https://docs.google.com/document/d/1gI4gW5OOYIMLOmIcx_VSnng2rYIFE1P0PoDyvXwhvQY/pub?embedded=true" width="650"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Use the link above if the document is not displayed properly.&lt;/em&gt;&lt;/p&gt;</description><link>http://letitcrash.com/post/55958814293</link><guid>http://letitcrash.com/post/55958814293</guid><pubDate>Sat, 20 Jul 2013 15:45:00 +0200</pubDate><category>Author: Roland Kuhn</category><category>dependency injection</category><dc:creator>pionic</dc:creator></item><item><title>2.2 Spotlight: Publish/Subscribe in Cluster</title><description>&lt;p&gt;With the distributed pub/sub extension you can broadcast messages to all actors in the cluster that have registered interest in a named topic.&lt;!-- more --&gt;&lt;/p&gt;
&lt;script src="https://gist.github.com/patriknw/5932409.js" type="text/javascript"&gt;&lt;/script&gt;&lt;p&gt;More detailed information is found in the &lt;a href="http://doc.akka.io/docs/akka/2.2.0/contrib/distributed-pub-sub.html"&gt;documentation&lt;/a&gt;.&lt;/p&gt;</description><link>http://letitcrash.com/post/55877737496</link><guid>http://letitcrash.com/post/55877737496</guid><pubDate>Fri, 19 Jul 2013 17:58:00 +0200</pubDate><category>spotlight22</category><category>Author: Patrik Nordwall</category><dc:creator>patriknw</dc:creator></item><item><title>2.2 Spotlight: Remote Death Watch</title><description>&lt;p&gt;Watch works as expected independent of where the watched actor is located. You will receive a &lt;code&gt;Terminated&lt;/code&gt; message, no matter the reason for the termination.&lt;!-- more --&gt;&lt;/p&gt;
&lt;script src="https://gist.github.com/patriknw/5955043.js" type="text/javascript"&gt;&lt;/script&gt;&lt;p&gt;Under the hood remote death watch uses heartbeat messages and a failure detector to generate Terminated message from network failures and JVM crashes, in addition to graceful termination of watched actor.&lt;/p&gt;
&lt;p&gt;Note that watching an ActorRef acquired with actorFor still does not trigger Terminated for lost connections. actorFor is deprecated in favor of actorSelection. Acquire the ActorRef to watch with Identify and ActorIdentity.&lt;/p&gt;
&lt;p&gt;Read more about how to tune the failure detector in the &lt;a href="http://doc.akka.io/docs/akka/2.2.0/scala/remoting.html#Watching_Remote_Actors"&gt;documentation&lt;/a&gt;.&lt;/p&gt;</description><link>http://letitcrash.com/post/55679652790</link><guid>http://letitcrash.com/post/55679652790</guid><pubDate>Wed, 17 Jul 2013 10:56:00 +0200</pubDate><category>spotlight22</category><category>Author: Patrik Nordwall</category><dc:creator>patriknw</dc:creator></item><item><title>2.2 Spotlight: ActorSelection, Watch and Identify</title><description>&lt;p&gt;&lt;code&gt;ActorSelection&lt;/code&gt; can be used pretty much in the same way as an &lt;code&gt;ActorRef&lt;/code&gt;, but DeathWatch must always be done through an &lt;code&gt;ActorRef&lt;/code&gt;, because here the incarnation of the actor is important.&lt;!-- more --&gt;&lt;/p&gt;
&lt;p&gt;To acquire an &lt;code&gt;ActorRef&lt;/code&gt; for an &lt;code&gt;ActorSelection&lt;/code&gt; you need to send a message to the selection and use the sender reference of the reply from the actor. Alternatively there is a built-in Identify message that all Actors will understand and automatically reply to with a ActorIdentity message containing the &lt;code&gt;ActorRef&lt;/code&gt;.&lt;/p&gt;
&lt;script src="https://gist.github.com/patriknw/5946725.js" type="text/javascript"&gt;&lt;/script&gt;&lt;p&gt;Read more about &lt;code&gt;ActorSelection&lt;/code&gt; in &lt;a href="http://doc.akka.io/docs/akka/2.2.0/java/untyped-actors.html#actorselection-java"&gt;docs for Java&lt;/a&gt; and &lt;a href="http://doc.akka.io/docs/akka/2.2.0/scala/actors.html#actorselection-scala"&gt;docs for Scala&lt;/a&gt;.&lt;/p&gt;</description><link>http://letitcrash.com/post/55504766698</link><guid>http://letitcrash.com/post/55504766698</guid><pubDate>Mon, 15 Jul 2013 13:12:00 +0200</pubDate><category>spotlight22</category><category>Author: Patrik Nordwall</category><dc:creator>pionic</dc:creator></item><item><title>2.2 Spotlight: actorSelection instead of actorFor</title><description>&lt;p&gt;actorFor is deprecated in favor of actorSelection because actor references acquired with actorFor behave differently for local and remote actors.&lt;!-- more --&gt;&lt;/p&gt;
&lt;p&gt;Take for example an actor which is terminated and created again under the same path. Sending to local references of the previous incarnation of the actor will not be delivered to the new incarnation, but the opposite was the case for remote references. The reason was that the target actor was looked up by its path on every message delivery and the path didn&amp;#8217;t distinguish between the two incarnations of the actor.&lt;/p&gt;
&lt;p&gt;For bootstrapping remote references or when the exact incarnation of the actor is irrelevant you should use &lt;code&gt;actorSelection&lt;/code&gt;.&lt;/p&gt;
&lt;script src="https://gist.github.com/patriknw/5946707.js" type="text/javascript"&gt;&lt;/script&gt;&lt;p&gt;Read more in the &lt;a href="http://doc.akka.io/docs/akka/2.2.0/project/migration-guide-2.1.x-2.2.x.html#Use_actorSelection_instead_of_actorFor"&gt;migration guide&lt;/a&gt;.&lt;/p&gt;</description><link>http://letitcrash.com/post/55250716550</link><guid>http://letitcrash.com/post/55250716550</guid><pubDate>Fri, 12 Jul 2013 12:38:00 +0200</pubDate><category>spotlight22</category><category>Author: Patrik Nordwall</category><dc:creator>patriknw</dc:creator></item><item><title>Cluster of 200 Nodes</title><description>&lt;p&gt;Most Akka clusters will probably consist of 2 to 10 nodes, but we were curious to know how far we could push it. We are happy to share that we have successfully tested an &lt;strong&gt;Akka 2.2.0 cluster with 200 nodes&lt;/strong&gt;. This is mind blowing, considering that this is the first official version of Akka cluster. This post details our experiences during the experiment.&lt;/p&gt;
&lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt;
&lt;p&gt;Before we all get too excited it is important to point out that there are alternatives to one single large cluster, such as splitting up the system into several smaller clusters, or worker nodes that are not part of the core cluster. The &lt;a href="http://doc.akka.io/docs/akka/2.2.0/contrib/cluster-client.html"&gt;Cluster Client&lt;/a&gt; can be a nice tool for this purpose.&lt;/p&gt;
&lt;p class="p1"&gt;&lt;strong&gt;&lt;em&gt;The Test&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The used test is &lt;a href="https://github.com/akka/akka/blob/v2.2.0/akka-cluster/src/multi-jvm/scala/akka/cluster/StressSpec.scala"&gt;&lt;code&gt;akka.cluster.StressSpec&lt;/code&gt;&lt;/a&gt;. It performs the following steps, when configured with 200 nodes. Each node is a separate JVM running one actor system.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Start and join 3 seed nodes and join 32 more nodes to the seed nodes&lt;/li&gt;
&lt;li&gt;Join nodes one by one, up to cluster size 67&lt;/li&gt;
&lt;li&gt;Join 32 nodes at the same time to one single node&lt;/li&gt;
&lt;li&gt;Join 69 nodes at the same time to the seed nodes, thereafter the cluster consists of 168 nodes&lt;/li&gt;
&lt;li&gt;Join nodes one by one, up to cluster size 200&lt;/li&gt;
&lt;li&gt;Exercise additional join/remove behavior&lt;/li&gt;
&lt;li&gt;Idle for a while&lt;/li&gt;
&lt;li&gt;Gracefully leave nodes one by one, down to cluster size 168&lt;/li&gt;
&lt;li&gt;Hard shutdown nodes one by one, down to cluster size 136&lt;/li&gt;
&lt;li&gt;Leave 32 nodes at the same time&lt;/li&gt;
&lt;li&gt;Shutdown 32 nodes at the same time, thereafter the cluster consists of 72 nodes&lt;/li&gt;
&lt;li&gt;Hard shutdown nodes one by one, down to cluster size 56&lt;/li&gt;
&lt;li&gt;Gracefully leave nodes one by one, down to cluster size 40&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This test was run 4 times with different configuration of number of nodes; 50, 100, 150 and 200 nodes. The charts below includes the results for all 4 runs.&lt;/p&gt;
&lt;p class="p1"&gt;&lt;strong&gt;&lt;em&gt;Hardware and configuration&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is not a completely realistic test environment, because we were short of physical hardware, but the test gives an indication of what is possible.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Five 16 core AMD Opteron 6128 and one 48 core AMD Opteron 6172 hosting up to 199 JVMs in total, and one additional 16 core AMD Opteron 6128 hosting 1 single JVM. The servers are connected on a private network.&lt;/li&gt;
&lt;li&gt;OS Ubuntu 11.10&lt;/li&gt;
&lt;li&gt;OpenJDK 7, version 1.7.0_09 (IcedTea7&amp;#160;2.3.3) (7u9-2.3.3-0ubuntu1~12.04.1).&lt;/li&gt;
&lt;li&gt;JVM settings: &lt;code&gt;-Xms128M -Xmx256M -XX:+UseNUMA -XX:+HeapDumpOnOutOfMemoryError -XX:-UseBiasedLocking -XX:+UseCompressedOops -XX:+UseCondCardMark -XX:+UseParallelGC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Akka version: 2.2.0&lt;/li&gt;
&lt;li&gt;Akka configuration deviation from default and what is specified in &lt;code&gt;StressSpec&lt;/code&gt;:&lt;br/&gt;&lt;code&gt;akka.cluster.gossip-different-view-probability=0.3&lt;/code&gt;&lt;br/&gt;&lt;code&gt;akka.remote.log-frame-size-exceeding=5000b&lt;/code&gt;&lt;br/&gt;&lt;code&gt;MultiJvm.akka.cluster.Stress.nrOfNodes=200&lt;/code&gt;&lt;br/&gt;&lt;code&gt;akka.test.cluster-stress-spec.exercise-actors=off&lt;/code&gt;&lt;br/&gt;&lt;code&gt;akka.test.cluster-stress-spec.nr-of-nodes-factor=16&lt;/code&gt;&lt;br/&gt;&lt;code&gt;akka.test.cluster-stress-spec.infolog=on&lt;/code&gt;&lt;br/&gt;&lt;code&gt;akka.test.cluster-stress-spec.idle-gossip-duration=120s&lt;/code&gt;&lt;br/&gt;&lt;code&gt;akka.test.cluster-stress-spec.expected-test-duration=7200s&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p class="p1"&gt;&lt;strong&gt;&lt;em&gt;Results&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One cluster scalability aspect is to measure how long time it takes to join one new member to an existing cluster, and compare how the size of the cluster affects that time. We measure the time it takes until all members have seen the new member as &amp;#8216;Up&amp;#8217;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="http://media.tumblr.com/c87ab79513d1ea4d9b1c81c617fcdeb4/tumblr_inline_mprsyv8S6A1qz4rgp.png"/&gt;&lt;/p&gt;
&lt;p&gt;Normally it takes 10 to 20 seconds to join one new member, and increased size of the cluster does not drastically increase the duration.&lt;/p&gt;
&lt;p&gt;What happens if we join many nodes at the same time. Good news. It does not take much longer than joining one node, i.e. it is more efficient to join many at the same time than it is to join them sequentially. The reason for this is that the membership changes are batched before being spread by the periodic gossip. One data point from the test is that it takes 21 seconds to join 69 nodes to a cluster of 99 nodes. Here we have used 3 seed nodes. It might be less efficient when joining to more seed nodes.&lt;/p&gt;
&lt;p&gt;Removing nodes, including failure detection, is also important in an elastic cluster. When shutting down nodes hard—System.exit of the JVM—the time for detection, downing and until all members have seen the removal looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="http://media.tumblr.com/cfca1a4c150bc5866bddd92977f6163c/tumblr_inline_mprszetzNK1qz4rgp.png"/&gt;&lt;/p&gt;
&lt;p&gt;A more graceful exit can be performed if you tell the cluster that a node shall leave. For example cluster aware routers take advantage of such removal by avoiding usage of nodes that are leaving. Leaving takes longer time, since there are more steps involved.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="http://media.tumblr.com/3c5ee4dcde1d978fd67030f05aefe152/tumblr_inline_mprszvChWd1qz4rgp.png"/&gt;&lt;/p&gt;
&lt;p&gt;It is not unrealistic that several nodes become unreachable at the same time. Hard shutdown of 32 nodes in a cluster with 104 members takes around 20 seconds. We got similar results for leaving several nodes at the same time. 24 seconds to leave 32 nodes in 136 nodes cluster.&lt;/p&gt;
&lt;p&gt;How much resources does the cluster itself consume? To be able to answer this we used one dedicated machine running one single JVM. The charts below shows the CPU and network usage of this machine during the test with 200 nodes. Note that this test represents an active cluster and you can expect less CPU and IO usage when there are less membership changes.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="http://media.tumblr.com/97169cd3908190c890be91df364df9fa/tumblr_inline_mprt0cy9iv1qz4rgp.png"/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="image" src="http://media.tumblr.com/06f1bb844595d03f296a3e9057d9a79f/tumblr_inline_mprt0lMxcX1qz4rgp.png"/&gt;&lt;/p&gt;
&lt;p class="p1"&gt;&lt;strong&gt;&lt;em&gt;Configuration Considerations&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One configuration option that should be adjusted when using clusters with more than 50 nodes is &lt;code&gt;akka.cluster.gossip-different-view-probability&lt;/code&gt;. This probability setting is used for the biased selection of the node to gossip to. When the cluster is large the default value (&lt;code&gt;0.8&lt;/code&gt;) means a too high total probability that many nodes selects the same target, resulting in a storm of gossip messages to one node. In this stress tests we have used &lt;code&gt;0.3&lt;/code&gt;, but for a production cluster of 200 nodes it should be set to &lt;code&gt;0.1&lt;/code&gt; or lower to reduce the risk of overloading nodes with many gossip messages. The drawback is slightly longer dissemination times when the cluster is small. In next version we plan to adjust this probability automatically with the size of the cluster.&lt;/p&gt;
&lt;p&gt;There are some other configuration settings that can be considered to be amended for large clusters, mostly to reduce the amount of transfered data. We have used default values for the test results presented here.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;akka.cluster.failure-detector.heartbeat-interval=2s&lt;/code&gt; and &lt;code&gt;akka.cluster.unreachable-nodes-reaper-interval=2s&lt;/code&gt; - less frequent heartbeat messages, trade-off: longer time to disseminate cluster membership changes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;akka.cluster.gossip-interval=2s&lt;/code&gt; - less frequent gossip messages, trade-off: longer time to not as quick failure detection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;akka.cluster.metrics.enabled=off&lt;/code&gt; - if you don&amp;#8217;t use the &lt;a href="http://doc.akka.io/docs/akka/2.2.0/scala/cluster-usage.html#Cluster_Metrics"&gt;&lt;code&gt;AdaptiveLoadBalancingRouter&lt;/code&gt;&lt;/a&gt; you can turn off metrics&lt;/li&gt;
&lt;/ul&gt;&lt;p class="p1"&gt;&lt;strong&gt;&lt;em&gt;Aiming for the Next Record&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Of course we tested with an even larger cluster. When we tried with 250 nodes the test timed out in various places, and the failure detector reported nodes as unreachable, which is expected from an overloaded system. We learned several things from pushing the cluster to the limit and these tests have been invaluable in the effort of hardening the remoting and clustering of Akka 2.2.0.&lt;/p&gt;
&lt;p&gt;It is great to see that it is possible to run a cluster of 200 nodes. We will continue to push the scalability of Akka cluster in upcoming versions and setting new large cluster records. Areas that can be optimized to reduce the cost of some operations have been identified. We also have several ideas of how to make the gossip protocol more efficient.&lt;/p&gt;</description><link>http://letitcrash.com/post/55167429414</link><guid>http://letitcrash.com/post/55167429414</guid><pubDate>Thu, 11 Jul 2013 14:01:00 +0200</pubDate><category>Author: Patrik Nordwall</category><category>benchmark</category><dc:creator>patriknw</dc:creator></item><item><title>2.2 Spotlight: Getting Started with Typesafe Activator</title><description>&lt;p&gt;&lt;a href="http://typesafe.com/platform/getstarted"&gt;Typesafe Activator&lt;/a&gt; helps you get started with the Typesafe Platform, Play Framework, Akka &amp;amp; Scala.&lt;/p&gt;
&lt;p&gt;You will find 5 getting started tutorials for Akka 2.2 in Typesafe Activator:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="http://typesafe.com/activator/template/hello-akka"&gt;Hello Akka!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://typesafe.com/activator/template/akka-supervision"&gt;Akka Supervision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://typesafe.com/activator/template/akka-java-spring"&gt;Akka Java Spring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://typesafe.com/activator/template/akka-clustering"&gt;Akka Clustered PubSub with Scala!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://typesafe.com/activator/template/akka-distributed-workers"&gt;Distributed workers with Akka and Scala!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a href="http://typesafe.com/platform/getstarted"&gt;Try it out!&lt;/a&gt; (Typesafe Activator is in Developer Preview)&lt;/p&gt;</description><link>http://letitcrash.com/post/55083687752</link><guid>http://letitcrash.com/post/55083687752</guid><pubDate>Wed, 10 Jul 2013 15:18:37 +0200</pubDate><category>spotlight22</category><category>Author: Patrik Nordwall</category><dc:creator>patriknw</dc:creator></item><item><title>Akka 2.2.0 Released</title><description>&lt;p&gt;&lt;p class="p1"&gt;&lt;em&gt;Dear hAkkers,&lt;/em&gt;&lt;/p&gt;

&lt;p class="p1"&gt;we—the Akka committers—proudly announce the FINAL RELEASE of &lt;strong&gt;Akka 2.2.0 “Coltrane”&lt;/strong&gt;. Half a year has passed since the release of Akka 2.1.0 “Mingus” and much has happened in our code base. User-visible API changes have been kept to a minimum, though, as most work happened under the hood; more on that later. &lt;span&gt;First let us take a look at what Coltrane brings you:&lt;/span&gt;&lt;/p&gt;
&lt;ul class="ul1"&gt;&lt;li&gt;&lt;span class="s1"&gt;&lt;a href="http://doc.akka.io/docs/akka/2.2.0/common/cluster.html"&gt;&lt;span class="s2"&gt;Cluster support&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span&gt; (with a big thank-you for the feedback throughout the development cycle); we have continued to improve on the preview offered with Mingus, e.g. adding &lt;/span&gt;&lt;a href="http://doc.akka.io/docs/akka/2.2.0/scala/cluster-usage.html#Node_Roles"&gt;&lt;span class="s3"&gt;node roles&lt;/span&gt;&lt;/a&gt;&lt;span&gt; or &lt;/span&gt;&lt;a href="http://doc.akka.io/docs/akka/2.2.0/scala/cluster-usage.html#Distributed_Publish_Subscribe_Pattern"&gt;&lt;span class="s3"&gt;distributed pub-sub&lt;/span&gt;&lt;/a&gt;&lt;span&gt; or the &lt;/span&gt;&lt;a href="http://doc.akka.io/docs/akka/2.2.0/scala/cluster-usage.html#Cluster_Client"&gt;&lt;span class="s3"&gt;cluster client&lt;/span&gt;&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/li&gt;
&lt;li class="li1"&gt;Fully &lt;a href="http://doc.akka.io/docs/akka/2.2.0/java/remoting.html"&gt;&lt;span class="s3"&gt;actor-based remoting&lt;/span&gt;&lt;/a&gt; implementation with support for multiple transports and high-level &lt;a href="http://doc.akka.io/docs/akka/2.2.0/scala/remoting.html#Failure_Detector"&gt;&lt;span class="s3"&gt;failure detection&lt;/span&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li class="li3"&gt;&lt;span class="s4"&gt;An &lt;a href="http://spray.io/blog/2013-05-24-benchmarking-spray/"&gt;&lt;span class="s2"&gt;extremely scalable&lt;/span&gt;&lt;/a&gt; actor-based &lt;a href="http://doc.akka.io/docs/akka/2.2.0/java/io.html"&gt;&lt;span class="s2"&gt;network IO layer&lt;/span&gt;&lt;/a&gt; with &lt;a href="http://doc.akka.io/docs/akka/2.2.0/java/io-tcp.html#Usage_Example__TcpPipelineHandler_and_SSL"&gt;&lt;span class="s2"&gt;SSL support&lt;/span&gt;&lt;/a&gt; and a protocol &lt;a href="http://doc.akka.io/docs/akka/2.2.0/scala/io-codec.html"&gt;&lt;span class="s2"&gt;pipeline infrastructure&lt;/span&gt;&lt;/a&gt;.&lt;/span&gt;&lt;/li&gt;
&lt;li class="li1"&gt;Reliable &lt;a href="http://doc.akka.io/docs/akka/2.2.0/java/remoting.html#Creating_Actors_Remotely"&gt;&lt;span class="s3"&gt;supervision&lt;/span&gt;&lt;/a&gt; and &lt;a href="http://doc.akka.io/docs/akka/2.2.0/scala/remoting.html#Watching_Remote_Actors"&gt;&lt;span class="s3"&gt;deathwatch&lt;/span&gt;&lt;/a&gt; for remote actors.&lt;/li&gt;
&lt;li class="li1"&gt;An experimental preview of &lt;a href="http://doc.akka.io/docs/akka/2.2.0/scala/typed-channels.html"&gt;&lt;span class="s3"&gt;Typed Channels&lt;/span&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p class="p2"&gt;This is just a very high-level overview of the biggest pieces, there have also been improvements in other areas like test coverage of our &lt;a href="https://github.com/akka/akka/tree/v2.2.0/akka-samples/akka-sample-osgi-dining-hakkers"&gt;&lt;span class="s3"&gt;OSGi bundles&lt;/span&gt;&lt;/a&gt;, or &lt;a href="http://doc.akka.io/japi/akka/2.2.0/akka/actor/SupervisorStrategy.html#logFailure(akka.actor.ActorContext,%20akka.actor.ActorRef,%20java.lang.Throwable,%20akka.actor.SupervisorStrategy.Directive)"&gt;&lt;span class="s3"&gt;how actor failures are logged&lt;/span&gt;&lt;/a&gt;, or in the semantics of &lt;a href="http://doc.akka.io/docs/akka/2.2.0/scala/actors.html#Lifecycle_Monitoring_aka_DeathWatch"&gt;&lt;span class="s3"&gt;ActorContext.unwatch()&lt;/span&gt;&lt;/a&gt;, or a more performant rewrite of &lt;a href="http://doc.akka.io/docs/akka/2.2.0/scala/agents.html"&gt;&lt;span class="s3"&gt;Agents&lt;/span&gt;&lt;/a&gt;, or how &lt;a href="http://doc.akka.io/docs/akka/2.2.0/scala/dispatchers.html"&gt;&lt;span class="s3"&gt;dispatchers&lt;/span&gt;&lt;/a&gt; and &lt;a href="http://doc.akka.io/docs/akka/2.2.0/scala/mailboxes.html"&gt;&lt;span class="s3"&gt;mailboxes&lt;/span&gt;&lt;/a&gt; can be configured outside of your code.&lt;/p&gt;
&lt;p class="p2"&gt;&lt;!-- more --&gt;&lt;/p&gt;
&lt;p class="p2"&gt;&lt;strong&gt;&lt;em&gt;Changes Since 2.2.0-RC2&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="ul1"&gt;&lt;li class="li1"&gt;&lt;span&gt;fix a bug in Props.create() when passing null arguments to the actor&lt;/span&gt;&lt;/li&gt;
&lt;li class="li1"&gt;more useful error message in case of deserialization failures&lt;/li&gt;
&lt;li class="li1"&gt;&lt;span&gt;documentation updates&lt;/span&gt;&lt;/li&gt;
&lt;li class="li1"&gt;&lt;span&gt;update to Typesafe Config 1.0.2 (fixes a bug when using unicode BOM)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p class="p5"&gt;For the complete list of all 27 tickets please refer to &lt;a href="https://www.assembla.com/spaces/akka/milestones/3984873-2-2-0"&gt;&lt;span class="s5"&gt;the assembla milestone&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p class="p1"&gt;&lt;strong&gt;&lt;em&gt;Credits&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class="p2"&gt;The Akka team at Typesafe would like to send special thanks to all external contributors (listed in decreasing order of commits): Mathias Doenitz, Johannes Rudolph, Dario Rexin, Rick Latrine, Christophe Pache, Raman Gupta, Kaspar Fischer, Ricky Elrod, Kevin Wright, Raymond Roestenburg, Michael Pilquist, Helena Edelson, Matthew Neeley, Thomas Lockney and Derek Mahar.&lt;/p&gt;

&lt;p class="p1"&gt;&lt;strong&gt;&lt;em&gt;What changes for existing code?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class="p2"&gt;We have continued on our path to unify the semantics between local and remote actor references. The most obvious difference was that remote references were bound to a name whereas local ones were bound to a specific actor lifecycle. If the local actor stops, the reference stops working, which was not the case for the remote reference in case a new actor was created at the same path. We changed it such that the local rules apply to remote references as well, making the “self” references of actors created subsequently with the same name distinct from each other. As a consequence, ActorRef equality was changed by taking into account the actor’s UID (which you can see in ActorRef.toString now).&lt;/p&gt;
&lt;p class="p2"&gt;The other most visible change concerns the creation of Props. Using anonymous inner classes as factories for your actors means that the required “$outer reference”—the reference to the enclosing scope—will have an influence on the serializability of your Props as well as on the thread-safety. Therefore we have rebased the inner workings of Props on the desired actor’s Class&amp;lt;?&amp;gt; and its constructor arguments. The benefit is that no closures are formed which would invite you e.g. to call methods on the enclosing actor, and also that serialization bindings are used to serialize the constructor arguments. Previously all Props were serialized only with Java serialization. In order to make full use of the potential of this approach we have deprecated some of the existing ways to obtain Props and introduced new ones.&lt;/p&gt;
&lt;p class="p2"&gt;Besides these changes there have been several smaller modifications, please &lt;a href="http://doc.akka.io/docs/akka/2.2.0/project/migration-guide-2.1.x-2.2.x.html"&gt;&lt;span class="s3"&gt;read the migration guide&lt;/span&gt;&lt;/a&gt; to see if you may need to adapt your application while upgrading.&lt;/p&gt;
&lt;p class="p2"&gt;&lt;strong&gt;&lt;em&gt;Where do I get it from?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class="p2"&gt;The artifacts have been published to Maven Central as usual, but this time for two different Scala versions:&lt;/p&gt;
&lt;p class="p2"&gt;&lt;code&gt;"com.typesafe.akka" % "akka-actor_2.10" % "2.2.0"&lt;/code&gt;&lt;span class="s6"&gt;&lt;br/&gt;using Scala 2.10.2&lt;/span&gt;&lt;/p&gt;
&lt;p class="p2"&gt;&lt;code&gt;"com.typesafe.akka" % "akka-actor_2.11.0-M3" % "2.2.0"&lt;/code&gt;&lt;span class="s6"&gt;&lt;br/&gt;using Scala 2.11.0-M3&lt;/span&gt;&lt;/p&gt;

&lt;p class="p1"&gt;&lt;em&gt;&lt;strong&gt;Assembla milestones:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p class="p1"&gt;In total we closed 563 tickets on six milestones.&lt;/p&gt;

&lt;ul class="ul1"&gt;&lt;li class="li1"&gt;&lt;a href="https://www.assembla.com/spaces/akka/milestones/2690943-2-2-m1"&gt;2.2-M1&lt;/a&gt;&lt;/li&gt;
&lt;li class="li1"&gt;&lt;a href="https://www.assembla.com/spaces/akka/milestones/2896213-2-2-m2"&gt;2.2-M2&lt;/a&gt;&lt;/li&gt;
&lt;li class="li1"&gt;&lt;a href="https://www.assembla.com/spaces/akka/milestones/2896943-2-2-m3"&gt;2.2-M3&lt;/a&gt;&lt;/li&gt;
&lt;li class="li1"&gt;&lt;a href="https://www.assembla.com/spaces/akka/milestones/3089253-2-2-0-rc1"&gt;2.2.0-RC1&lt;/a&gt;&lt;/li&gt;
&lt;li class="li1"&gt;&lt;a href="https://www.assembla.com/spaces/akka/milestones/3602243-2-2-0-rc2"&gt;2.2.0-RC2&lt;/a&gt;&lt;/li&gt;
&lt;li class="li1"&gt;&lt;a href="https://www.assembla.com/spaces/akka/milestones/3984873-2-2-0"&gt;2.2.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p class="p2"&gt;&lt;/p&gt;
&lt;p class="p1"&gt;Website:&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="s4"&gt;    &lt;a href="http://akka.io/"&gt;&lt;span class="s2"&gt;&lt;a href="http://akka.io"&gt;http://akka.io&lt;/a&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class="p1"&gt;Binary distribution:&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="s2"&gt;    &lt;a href="http://download.akka.io/downloads/akka-2.2.0.tgz"&gt;&lt;a href="http://download.akka.io/downloads/akka-2.2.0.tgz"&gt;http://download.akka.io/downloads/akka-2.2.0.tgz&lt;/a&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="s2"&gt;    &lt;a href="http://download.akka.io/downloads/akka-2.2.0.zip"&gt;&lt;a href="http://download.akka.io/downloads/akka-2.2.0.zip"&gt;http://download.akka.io/downloads/akka-2.2.0.zip&lt;/a&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class="p1"&gt;Documentation:&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="s2"&gt;    &lt;a href="http://doc.akka.io/docs/akka/2.2.0/"&gt;&lt;a href="http://doc.akka.io/docs/akka/2.2.0/"&gt;http://doc.akka.io/docs/akka/2.2.0/&lt;/a&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="s2"&gt;    &lt;a href="http://doc.akka.io/japi/akka/2.2.0/"&gt;&lt;a href="http://doc.akka.io/japi/akka/2.2.0/"&gt;http://doc.akka.io/japi/akka/2.2.0/&lt;/a&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="s2"&gt;    &lt;a href="http://doc.akka.io/api/akka/2.2.0/"&gt;&lt;a href="http://doc.akka.io/api/akka/2.2.0/"&gt;http://doc.akka.io/api/akka/2.2.0/&lt;/a&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class="p1"&gt;Issue tracker:&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="s4"&gt;    &lt;a href="http://www.assembla.com/spaces/akka/"&gt;&lt;span class="s2"&gt;&lt;a href="http://www.assembla.com/spaces/akka/"&gt;http://www.assembla.com/spaces/akka/&lt;/a&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class="p1"&gt;Mailing list:&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="s4"&gt;    &lt;a href="https://groups.google.com/group/akka-user"&gt;&lt;span class="s2"&gt;&lt;a href="https://groups.google.com/group/akka-user"&gt;https://groups.google.com/group/akka-user&lt;/a&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p class="p1"&gt;Akka is released under the Apache V2 license.&lt;/p&gt;

&lt;p class="p1"&gt;Happy hAkking!&lt;/p&gt;&lt;/p&gt;</description><link>http://letitcrash.com/post/54995640292</link><guid>http://letitcrash.com/post/54995640292</guid><pubDate>Tue, 09 Jul 2013 14:22:00 +0200</pubDate><category>announcement</category><dc:creator>pionic</dc:creator></item><item><title>2.2 Spotlight: Configure Seed Nodes from Command Line</title><description>&lt;p&gt;The &lt;a href="https://github.com/typesafehub/config"&gt;Typesafe Config library&lt;/a&gt; has been updated to version 1.0.1 to support a new syntax for string lists from the command line. This is useful when defining the cluster seed nodes from a start script.&lt;/p&gt;
&lt;p&gt;In the configuration file you would define:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
akka.cluster.seed-nodes = [
  "akka.tcp://ClusterSystem@host1:2552",
  "akka.tcp://ClusterSystem@host2:2552"]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Corresponding command line parameters:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
-Dakka.cluster.seed-nodes.0=akka.tcp://ClusterSystem@host1:2552
-Dakka.cluster.seed-nodes.1=akka.tcp://ClusterSystem@host2:2552
&lt;/code&gt;&lt;/pre&gt;</description><link>http://letitcrash.com/post/54911608758</link><guid>http://letitcrash.com/post/54911608758</guid><pubDate>Mon, 08 Jul 2013 15:05:15 +0200</pubDate><category>spotlight22</category><category>Author: Patrik Nordwall</category><dc:creator>patriknw</dc:creator></item><item><title>2.2 Spotlight: Immutable Everywhere</title><description>&lt;p&gt;Akka has in 2.2 been refactored to require scala.collection.immutable data structures as much as possible, this leads to fewer bugs and more opportunity for sharing data safely.&lt;/p&gt;
&lt;p&gt;Do you know that some of the collection types in Scala Predef are mutable? For example, a method defined with parameter of type &lt;code&gt;Seq[String]&lt;/code&gt;, without any import, can be used with both an immutable &lt;code&gt;List&lt;/code&gt; and a mutable &lt;code&gt;ListBuffer&lt;/code&gt; or an array. Such method signatures have been changed to &lt;code&gt;scala.collection.immutable.Seq&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="http://doc.akka.io/docs/akka/2.2.0-RC2/project/migration-guide-2.1.x-2.2.x.html#Immutable_everywhere"&gt;Migration Guide&lt;/a&gt; for more information.&lt;/p&gt;</description><link>http://letitcrash.com/post/54661133762</link><guid>http://letitcrash.com/post/54661133762</guid><pubDate>Fri, 05 Jul 2013 10:34:40 +0200</pubDate><category>spotlight22</category><category>Author: Patrik Nordwall</category><dc:creator>patriknw</dc:creator></item><item><title>2.2 Spotlight: Simpler use of Stash</title><description>&lt;p&gt;With the addition of &lt;a href="http://letitcrash.com/post/54099834993/2-2-spotlight-mailbox-requirements"&gt;Mailbox requirements&lt;/a&gt; usage of the &lt;code&gt;Stash&lt;/code&gt; trait became simpler, too: &lt;code&gt;Stash&lt;/code&gt; based actors will pick up the correct mailbox type without the need of any additional documentation. Here is a simple example  using &lt;code&gt;Stash&lt;/code&gt;:&lt;/p&gt;
&lt;script src="https://gist.github.com/drewhk/5907823.js" type="text/javascript"&gt;&lt;/script&gt;&lt;p&gt;See the documentation on &lt;a href="http://doc.akka.io/docs/akka/2.2.0-RC2/scala/actors.html#Stash"&gt;Stash &lt;/a&gt;for details, and if you feel adventurous take a look at the &lt;a href="http://doc.akka.io/docs/akka/2.2.0-RC2/scala/mailboxes.html"&gt;Mailboxes&lt;/a&gt; documentation section to see how you can customize the mailbox of actors using &lt;code&gt;Stash&lt;/code&gt;.&lt;/p&gt;</description><link>http://letitcrash.com/post/54507231889</link><guid>http://letitcrash.com/post/54507231889</guid><pubDate>Wed, 03 Jul 2013 14:11:41 +0200</pubDate><category>spotlight22</category><category>author: Endre Sándor Varga</category><dc:creator>drewhk</dc:creator></item><item><title>2.2 Spotlight: Logging of Actor Failures</title><description>&lt;p&gt;Previously every exception escalated to the a supervisor was logged in the child at ERROR level. This has been made more flexible by moving the logging into the parent’s supervisor strategy where it arguably also belonged in the first place: it is the supervisor which attributes severity to a failure.&lt;/p&gt;
&lt;script src="https://gist.github.com/rkuhn/5883262.js" type="text/javascript"&gt;&lt;/script&gt;&lt;p&gt;See also &lt;a href="http://doc.akka.io/docs/akka/2.2.0-RC2/scala/fault-tolerance.html#Logging_of_Actor_Failures"&gt;the docs&lt;/a&gt; for a little more information.&lt;/p&gt;</description><link>http://letitcrash.com/post/54348001688</link><guid>http://letitcrash.com/post/54348001688</guid><pubDate>Mon, 01 Jul 2013 17:42:56 +0200</pubDate><category>spotlight22</category><category>Author: Roland Kuhn</category><dc:creator>pionic</dc:creator></item></channel></rss>
